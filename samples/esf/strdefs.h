#ifndef ESF_STRDEFS_H
#define ESF_STRDEFS_H

#include <linux/esf/defs.h>

#define __ESF_EF_STRLEN 7 // with zero
typedef struct {
    char str[__ESF_EF_STRLEN];
} esf_event_flags_str_t;

#define __ESF_EF_USE_CHAR_FOR(flag, map, buff, c, offset) do { if (map & flag) { buff[offset] = c;} offset++; } while(0)

esf_event_flags_str_t esf_event_flags_str(esf_event_flags_t flags_mask) {
    esf_event_flags_str_t buff;
    memset(buff.str, ' ', sizeof(buff.str) - 1);
    buff.str[__ESF_EF_STRLEN - 1] = '\0';
    int offset = 0;

    __ESF_EF_USE_CHAR_FOR(ESF_EVENT_CAN_CONTROL, flags_mask, buff.str, 'C', offset);
    __ESF_EF_USE_CHAR_FOR(ESF_EVENT_QUERYABLE, flags_mask, buff.str, 'Q', offset);
    __ESF_EF_USE_CHAR_FOR(ESF_EVENT_WAITS_FOR_AUTH, flags_mask, buff.str, 'W', offset);
    __ESF_EF_USE_CHAR_FOR(ESF_EVENT_AUTHORIZED, flags_mask, buff.str, 'A', offset);
    __ESF_EF_USE_CHAR_FOR(ESF_EVENT_DENIED, flags_mask, buff.str, 'D', offset);

    return buff;
}

#define __ESF_ET_CASE_STR(et) case et: { return #et; } break
#define __ESF_ET_DEFAULT_STR(str) default: return str

const char *esf_event_type_name(esf_event_type_t event_type) {
    switch (event_type) {
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_PROCESS_TRACE);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_PROCESS_SIGNAL);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_PROCESS_MAP_EXEC);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_PROCESS_EXITED);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_PROCESS_EXECUTION);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_PROCESS_CREATED);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_PROCESS_CRASHED);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_PROCESS_CHUID);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_PROCESS_CHGID);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_FILE_CREATE);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_FILE_REMOVE);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_FILE_MOVE);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_FILE_OPEN);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_FILE_MODIFY);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_FILE_EXEC);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_FILE_TRUNCATE);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_FILE_READ);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_FILE_ACCESS);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_FILE_CLOSED);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_FS_MOUNT);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_FS_UMOUNT);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_FS_LINK_CREATE);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_FS_LINK_REMOVE);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_FS_FILE_CHOWN);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_FS_FILE_CHATTR);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_FS_FILE_CHXATTR);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_NET_CONN_ESTABLISHED);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_NET_DOMAIN_RESOLVED);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_NET_SOCKET_CREATED);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_NET_SOCKET_RECV);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_NET_SOCKET_SEND);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_NET_TUN_CREATE);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_NET_TUN_CLOSE);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_NET_NF_CONF_CHANGED);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_NET_NF_CONF_RULE_ADD);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_NET_NF_CONF_RULE_REMOVE);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_HW_DEVICE_ADD);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_HW_DEVICE_REMOVE);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_HW_DEVICE_SOFT_REMOVE);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_KERN_BPF_PROG_LOAD);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_KERN_BPF_PROG_UNLOAD);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_KERN_BPF_MAP_LOOKUP_ELEM);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_KERN_BPF_MAP_UPDATE_ELEM);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_KERN_BPF_MAP_REMOVE_ELEM);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_KERN_MOD_LOAD);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_KERN_MOD_UNLOAD);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_KERN_SHUTDOWN);
        __ESF_ET_CASE_STR(ESF_EVENT_TYPE_KERN_REBOOT);
        __ESF_ET_DEFAULT_STR("ESF_UNKNOWN_EVENT_TYPE");
    }
}

#endif //ESF_STRDEFS_H
